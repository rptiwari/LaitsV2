/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TabbedGUI.java
 *
 * Created on Nov 21, 2010, 10:22:44 AM
 */
package amt.version2;

import amt.comm.CommException;
import amt.data.Task;
import amt.data.TaskFactory;
import amt.graph.Graph;
import amt.graph.GraphCanvas;
import amt.graph.Vertex;
import amt.parser.Parser;
import amt.parser.Scanner;
import java.io.BufferedReader;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import amt.log.Logger;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import javax.swing.JFrame;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import amt.BlockSocket;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;

/**
 * This method contains a singleton instance of the main window
 * @author Megana
 */
public class TabbedGUI extends javax.swing.JFrame implements WindowListener {

  Logger logger = Logger.getLogger();
  DescriptionPanel dPanel;
  InputsPanel iPanel;
  CalculationsPanel cPanel;
  GraphsPanel gPanel;
  Graph graph;
  Vertex currentVertex;
  Scanner scanner;
  Parser parser;
  GraphCanvas graphCanvas;
  int currentIndex = 0;
  //Tab Pane Indexes
  int DESCRIPTION = 0;
  int INPUTS = 1;
  int CALCULATIONS = 2;
  int GRAPHS = 3;
  Task task;

  private BlockSocket blockSocket=BlockSocket.getBlockSocket();

  /** 
   * Creates new form TabbedGUI
   */
  public TabbedGUI(Vertex v, Graph g, GraphCanvas gc, boolean show) {
    graph = g;
    graphCanvas = gc;
    currentVertex = v;

    try {
      this.task = TaskFactory.getInstance().getActualTask();
    } catch (CommException ex) {
    }

    initComponents();
    initTabs(currentVertex, graph, gc);
    setTabListener();
    addWindowListener(this);

    if (currentVertex.nodeName.equals("") || currentVertex.nodeName.equals("New Node")) {
      this.setTitle("New Node");
    } else {
      this.setTitle(currentVertex.nodeName);
    }

    if (allVertexesDefined()) {
      if (allVertexesHaveEquations() && !gc.getModelHasBeenRun()) {
        tabPane.setSelectedIndex(CALCULATIONS);
        logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.3");
      } else if (allVertexesHaveEquations() && gc.getModelHasBeenRun()) {
        tabPane.setSelectedIndex(GRAPHS);
        logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.4");
      } else {
        tabPane.setSelectedIndex(INPUTS);
        logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.2");
      }
    } else {
      tabPane.setSelectedIndex(DESCRIPTION);
      logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.1");
    }

    //Retrieve the correct equation from a file if the correct equation isn't already set
    if (currentVertex.correctEquation == null) {
      getCorrectAnswersFromFile();
    }

    this.pack();

    if (show != false) {
      this.setVisible(true);
      this.setAlwaysOnTop(true);
    }
    
    this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    this.setResizable(false);
    this.setLocationRelativeTo(this.getParent());

    this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  }

  public void initTabs(Vertex v, Graph g, GraphCanvas gc) {
    dPanel = new DescriptionPanel(this, v, g, gc);
    descriptionPanel.setLayout(new java.awt.GridLayout(1, 1));
    descriptionPanel.add(dPanel);

    cPanel = new CalculationsPanel(this, v, g, gc);
    calculationPanel.setLayout(new java.awt.GridLayout(1, 1));
    calculationPanel.add(cPanel);

    iPanel = new InputsPanel(this, v, g, gc);
    inputsPanel.setLayout(new java.awt.GridLayout(1, 1));
    inputsPanel.add(iPanel);

    if(v.label!=null)
    {
      gPanel = new GraphsPanel(this, v, g, gc);
      graphsPanel.setLayout(new java.awt.GridLayout(1, 1));
      graphsPanel.add(gPanel);
    }
    
  }

  private boolean allVertexesDefined() {
    boolean allDefined = true;
    for (int i = 0; i < graph.getVertexes().size(); i++) {
      Vertex v = (Vertex) graph.getVertexes().get(i);
      if (v.nodeName.equals("") || v.getDescriptionButtonStatus()==v.WRONG) {
        allDefined = false;
        continue;
      }
    }
    return allDefined;
  }

  private boolean allVertexesHaveEquations() {
    boolean allHaveEquations = true;
    for (int i = 0; i < graph.getVertexes().size(); i++) {
      Vertex v = (Vertex) graph.getVertexes().get(i);
      if (v.equation == null || v.equation.toString().equals("")) {
        allHaveEquations = false;
        continue;
      }
    }
    return allHaveEquations;
  }

  public Vertex getCurrentVertex() {
    return this.currentVertex;
  }
  

  /**
   * Gets the correct description for the node
   *
   */
    public void getCorrectDescriptionFromFile() {
    String fileName = "";
    try {
      TaskFactory server = TaskFactory.getInstance();
      fileName = server.getActualTask().getLevel() + "-" + server.getActualTask().getTitle().replace(" ", "") + "Solution.txt";
    } catch (CommException ex) {
      //Add correct logger
    }

    String fileLine = "";
    BufferedReader TempReader = null;
    FileInputStream fi;
    try {
      fi = new FileInputStream(fileName);
      TempReader = new BufferedReader(new InputStreamReader(fi));
      while ((fileLine = TempReader.readLine()) != null) {
        if (fileLine.startsWith("SituationDescription: " + currentVertex.label)){
          fileLine = fileLine.replace("SituationDescription: " + currentVertex.label + " = ", "");
          currentVertex.situationDescription = fileLine;
        }
      }
      fi.close();
      TempReader.close();
    } catch (Exception ex) {
      //Add log
    }
  }
public void getCorrectDescription()
{
  //currentVertex= (Vertex) graph.getVertexes().getLast();
  getCorrectAnswersFromFile();
}

  private void getCorrectAnswersFromFile() {
    String fileName = "";
    try {
      TaskFactory server = TaskFactory.getInstance();
      fileName = server.getActualTask().getLevel() + "-" + server.getActualTask().getTitle().replace(" ", "") + "Solution.txt";
    } catch (CommException ex) {
      //Add correct logger
    }

    String fileLine = "";
    String correct = "";
    BufferedReader TempReader = null;
    FileInputStream fi;
    try {
      fi = new FileInputStream(fileName);
      TempReader = new BufferedReader(new InputStreamReader(fi));
      while ((fileLine = TempReader.readLine()) != null) {
        if (fileLine.startsWith("Equation: " + currentVertex.label)) {
          fileLine = fileLine.replace("Equation: " + currentVertex.label + " = ", "");
          correct = fileLine.trim();
        } else if (fileLine.startsWith("CorrectDescription: " + currentVertex.label)){
          fileLine = fileLine.replace("CorrectDescription: " + currentVertex.label + " = ", "");
          currentVertex.correctDescription = fileLine;
        } else if (fileLine.startsWith(currentVertex.label + " type: ")) {
          fileLine = fileLine.replace(currentVertex.label + " type: ", "");
          currentVertex.correctType = fileLine;
        } else if (fileLine.startsWith(currentVertex.label + " inputs: ")) {
          fileLine = fileLine.replace(currentVertex.label + " inputs: ", "");
          currentVertex.correctInputs = fileLine;
        } else if (fileLine.startsWith(currentVertex.label + " outputs: ")) {
          fileLine = fileLine.replace(currentVertex.label + " outputs: ", "");
          currentVertex.correctOutputs = fileLine;
        } else {
          String splitLine[] = fileLine.split("=");
          if (splitLine[0].trim().equals(currentVertex.label)) {
            splitLine[1] = splitLine[1].replace(",", "");
            currentVertex.correctValues.add(Double.parseDouble(splitLine[1].trim()));
          }
        }
      }
      fi.close();
      TempReader.close();
    } catch (Exception ex) {
      //Add log
    }
    parseCorrectEquation(correct);
    System.out.println("fileLine: "+currentVertex.correctDescription);
  }

  private void parseCorrectEquation(String correct) {
    System.out.println("Correct string: " + correct);
    scanner = new Scanner(currentVertex.correctEquation);
    System.out.println("Initial correct equation: " + currentVertex.correctEquation);
    parser = new Parser();
    String currentWord = "";
    //Add correct Answer
    for (int i = 0; i < correct.length(); i++) {
      char currentChar = correct.charAt(i);
      if (Character.isDigit(currentChar)) {
        if (!currentWord.equals("")) {
          updateEquation(scanner.addInput(currentWord, Scanner.VARIABLE));
          currentWord = "";
        }
        updateEquation(scanner.addInput(currentChar + "", Scanner.DIGIT));
      } else if (currentChar == '+' || currentChar == '-' || currentChar == '*' || currentChar == '/') {
        if (!currentWord.equals("")) {
          updateEquation(scanner.addInput(currentWord, Scanner.VARIABLE));
          currentWord = "";
        }
        updateEquation(scanner.addInput(currentChar + "", Scanner.OPERATION));
      } else if (currentChar == ')' || currentChar == '(') {
        if (!currentWord.equals("")) {
          updateEquation(scanner.addInput(currentWord, Scanner.VARIABLE));
          currentWord = "";
        }
        updateEquation(scanner.addInput(currentChar + "", Scanner.PARENTHESIS));
      } else {
        currentWord += currentChar;
      }
    }
    if (!currentWord.equals("")) {
      updateEquation(scanner.addInput(currentWord, Scanner.VARIABLE));
      currentWord = "";
    }
    System.out.println("Final equation: " + currentVertex.correctEquation);
  }

  /**
   * Update displayed equation in the text area and the error messages
   *
   * @param notError
   * @return
   */
  private boolean updateEquation(boolean notError) {
    if (notError) {
      parser.setEquation(scanner.getEquation());
      if (!parser.parse()) {
      } else {
        currentVertex.correctEquation = parser.getEquation();
        return true;
      }
    }
    return false;
  }

  private void setTabListener() {
    ChangeListener changeListener = new ChangeListener() {

      public void stateChanged(ChangeEvent e) {
        //Only let the user see the descriptions tab
        if (allVertexesDefined() == false) {
          if (tabPane.getSelectedIndex() != DESCRIPTION) {
            tabPane.setSelectedIndex(DESCRIPTION);
            logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.5");
          }
          currentIndex = tabPane.getSelectedIndex();
        } else if (allVertexesHaveEquations() == false) {
          if (tabPane.getSelectedIndex() != GRAPHS) {
            if (tabPane.getSelectedIndex() != currentIndex) {
              
              //Print the appropriate logger
              if (tabPane.getSelectedIndex() == DESCRIPTION) {
                currentIndex = tabPane.getSelectedIndex();
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.5");
              } else if (tabPane.getSelectedIndex() == INPUTS) {
                logger.concatOut(Logger.ACTIVITY, "No message", "Go to inputs tab try");
                String returnMsg=blockSocket.blockQuery(graphCanvas, "Go to inputs tab");
                if(returnMsg.equals("allow"))
                {
                  currentIndex = tabPane.getSelectedIndex();
                  logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.6");
                }
                else{
                  tabPane.setSelectedIndex(currentIndex);
                   JOptionPane.showMessageDialog(dPanel, returnMsg.split(":")[1]);
                }
                 
                
              } else if (tabPane.getSelectedIndex() == CALCULATIONS) {
                currentIndex = tabPane.getSelectedIndex();
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.7");
              }
            }
          } else {
            if (tabPane.getSelectedIndex() != currentIndex) {
              tabPane.setSelectedIndex(currentIndex);
              //Print the appropriate logger
              if (tabPane.getSelectedIndex() == DESCRIPTION) {
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.5");
              } else if (tabPane.getSelectedIndex() == INPUTS) {
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.6");
              } else if (tabPane.getSelectedIndex() == CALCULATIONS) {
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.7");
              } else if (tabPane.getSelectedIndex() == GRAPHS) {
                logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.8");
              }
            }
          }
        }

      }
    };
    tabPane.addChangeListener(changeListener);
  }

  public Graph getGraph() {
    return graph;
  }

  public CalculationsPanel getCalculationsPanel() {
    return cPanel;
  }

  public InputsPanel getInputsPanel() {
    return iPanel;
  }

  public GraphsPanel getGraphsPanel() {
    return gPanel;
  }

  public void windowClosing(WindowEvent e) {
    logger.concatOut(Logger.ACTIVITY, "No message", "Close the node try-"+currentVertex.nodeName);
    String returnMsg=blockSocket.blockQuery(this, "Close the node");
    if(returnMsg.equals("allow"))
    {
      currentVertex.isOpen = false;
      for(int i = 0; i < graphCanvas.getOpenTabs().size(); i++) {
      if (graphCanvas.getOpenTabs().get(i).currentVertex.nodeName.equals(this.currentVertex.nodeName)) {
        graphCanvas.getOpenTabs().remove(i);
      }
      }
      logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.9");
      this.setVisible(false);
    }
    else
      JOptionPane.showMessageDialog(this, returnMsg.split(":")[1].trim());


    
  }
  public void windowOpened(WindowEvent e) {
  }

  public void windowClosed(WindowEvent e) {
    //logger.out(Logger.ACTIVITY, "TabbedGUI.TabbedGUI.9");
  }

  public void windowIconified(WindowEvent e) {
  }

  public void windowDeiconified(WindowEvent e) {
  }

  public void windowActivated(WindowEvent e) {
  }

  public void windowDeactivated(WindowEvent e) {
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPane = new javax.swing.JTabbedPane();
        descriptionPanel = new javax.swing.JPanel();
        inputsPanel = new javax.swing.JPanel();
        calculationPanel = new javax.swing.JPanel();
        graphsPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setResizable(false);

        tabPane.setMinimumSize(new java.awt.Dimension(500, 500));
        tabPane.setPreferredSize(new java.awt.Dimension(500, 400));
        tabPane.setRequestFocusEnabled(false);

        javax.swing.GroupLayout descriptionPanelLayout = new javax.swing.GroupLayout(descriptionPanel);
        descriptionPanel.setLayout(descriptionPanelLayout);
        descriptionPanelLayout.setHorizontalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        descriptionPanelLayout.setVerticalGroup(
            descriptionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        tabPane.addTab("Description", descriptionPanel);

        javax.swing.GroupLayout inputsPanelLayout = new javax.swing.GroupLayout(inputsPanel);
        inputsPanel.setLayout(inputsPanelLayout);
        inputsPanelLayout.setHorizontalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        inputsPanelLayout.setVerticalGroup(
            inputsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        tabPane.addTab("Inputs", inputsPanel);

        javax.swing.GroupLayout calculationPanelLayout = new javax.swing.GroupLayout(calculationPanel);
        calculationPanel.setLayout(calculationPanelLayout);
        calculationPanelLayout.setHorizontalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        calculationPanelLayout.setVerticalGroup(
            calculationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        tabPane.addTab("Calculations", calculationPanel);

        javax.swing.GroupLayout graphsPanelLayout = new javax.swing.GroupLayout(graphsPanel);
        graphsPanel.setLayout(graphsPanelLayout);
        graphsPanelLayout.setHorizontalGroup(
            graphsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 629, Short.MAX_VALUE)
        );
        graphsPanelLayout.setVerticalGroup(
            graphsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 567, Short.MAX_VALUE)
        );

        tabPane.addTab("Graphs", graphsPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPane, javax.swing.GroupLayout.DEFAULT_SIZE, 613, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
//    /**
//    * @param args the command line arguments
//    */
//    public static void main(String args[]) {
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new TabbedGUI().setVisible(true);
//            }
//        });
//    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel calculationPanel;
    private javax.swing.JPanel descriptionPanel;
    private javax.swing.JPanel graphsPanel;
    private javax.swing.JPanel inputsPanel;
    private javax.swing.JTabbedPane tabPane;
    // End of variables declaration//GEN-END:variables
}
